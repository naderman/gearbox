/*
 * GearBox Project: Components for robotics 
 *               http://gearbox.sf.net/
 * Copyright (c) 2008 GearBox Team
 *
 * This copy of GearBox is licensed to you under the terms described in the
 * the LICENSE file included in this distribution.
 *
 */

/*!

@page gbx_doc_constitution GearBox Constitution

1. TECHNICAL CHOICES RELATED TO PROJECT SETUP
- build system: [CMake]
- revision control system: [svn]
- unit test system: [CTest]
- documentation: [Doxygen]
- hosting service: [SorceForge]
- bug tracking: [Trac]
- name [Gearbox]

2. CONSTRAINTS ON PROJECT OPERATION

2.1 Source code life cycle
@image html gbx_src_life_cycle.png

2.2.1 Criteria for acceptance into sandbox
- relevance: [Any reusable software related to robotics. Emphasis on
algorithm and driver implementations. Integration frameworks are
generally discouraged. Relevance of a particular library is determined
through mailing list discussion.]
- license [must specify *an* open source license]
- copyright [must specify ownership]

2.2.2 Criteria for acceptance into distribution
- documentation [sufficient to be useful, depends on the complexity of
software, determined by peer review (at least 1 reviewer) and a public
discussion on the mailing list.]
- tests and sample code [sufficient to be useful, depends on software,
determined by peer review.]
- programming style [must name a known style, or describe a style (see
Appendix A), and adhere to it]
- compilation [must compile without warnings (with -Wall) on all
supported platforms with all supported compilers.
- operation [Libraries must operate (within reason) as described by the
documentation. Reviewers of hardware drivers are encouraged to have
access to hardware where feasible.]

2.2.3 Criteria for a warning
- all of 2.2.2 [failure of any in 2.2.2]

2.2.4 Criteria for disabling
- compilation [fails to compile on any one of the supported
platforms/complilers (as specified by the library developer) or does not
gracefully handle one of the platforms/compilers specified as supported
by Gearbox but not supported by that library - will be disabled
immediatly in SVN and in any following releases until fixed]

2.2.5 Criteria for retirement from the distribution
- compilation [fails for 2 months since disabling to compile on any one
of the supported platforms/complilers (as specified by the library
developer) or does not gracefully handle one of the platforms/compilers
specified as supported by Gearbox but not supported by that library -
will be moved to graveyard at the end of the 2nd month]
- other in 2.2.2 [failure of any in 2.2.2 for 3 months since warning]

2.3 Release of source code
[Regular frequent releases every 1.5-3 months.]

2.4 Ownership of source code
[Copyright belongs to authors and major contributors]

3. FREEDOMS
[
Aside from complying with Sec.2, the designer of every module within the
project is not constrained in any way. We specifically mention several
important freedoms:
- OS, compiler, programming language. New contributor's responsibility
is to make sure that the new addition does not break the existing code.
- code design, e.g. whether or not to use C++ exceptions.
- dependencies
- data types used by libraries
]

A. Programming Style

In the case of not using a well-known, named style, contributors must
describe the programming style in sufficient detail for others to be
able to adhere to it (assuming, of course, that others are also capable
of looking at the code for details). An example of what is necessary for
C++ is given below.

- Naming conventions:
  - variables, member variables, classes, structs, namespaces
  - functions, member functions
  - #defines, enums
  - filenames
  - API usage style
- Units and coordinate systems, if applicable (needless to say that the
units and CS's of the API must be documented separately, this applies to
the code itself.)
*/
